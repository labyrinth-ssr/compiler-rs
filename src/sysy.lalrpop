use compiler::ast::*;

// lalrpop 里的约定
grammar;

// 约束 lexer 的行为
match {
  // 跳过空白符和注释
  r"\s*" => {},
  r"//[^\n\r]*[\n\r]*" => {},
  r"/\*([^*]*|\*+[^/])*\*\/" => {},
  // 剩下的情况采用默认方式处理
  _
}

// nonterminal declarations
// 定义 CompUnit, 其返回值类型为 String
// parser 在解析完成后的行为是返回 FuncDef 的值
pub CompUnit: CompUnit = <func_def: FuncDef> => CompUnit { <> };

// 尖括号是出现过的正则的引用
FuncDef:FuncDef = {
  <func_type: FuncType> <ident: Ident> "(" ")" <block: Block> => {
    FuncDef {
      <>
    }
  }
}

// <> means synthesize names for the matched values and insert a comma-separated list here
FuncType: FuncType = "int" => FuncType::Int;

Block: Block = "{" <stmt: Stmt> "}" => Block { <> };

Stmt: Stmt = "return" <exp:Exp> ";" => Stmt { exp:*exp };

Number: i32 = <num: IntConst> => <>;

Exp:Box<Exp> = {
  LOrExp
};

PrimaryExp:Box<Exp> = {
  "(" <Exp> ")" => <>,
  Number => Box::new(Exp::Number(<>)),
};

// Addexp 
UnaryExp: Box<Exp>  =  {
  <a:UnaryOp> <b:UnaryExp> => Box::new(Exp::UnaryExp(a,b)),
  PrimaryExp
};

MulExp: Box<Exp> = {
  <a:MulExp> <b:MulOp> <c:UnaryExp> => Box::new(Exp::BinaryExp(a,b,c)),
  UnaryExp
};            

AddExp: Box<Exp> = {
  <a:AddExp> <b:AddOp> <c:MulExp> => Box::new(Exp::BinaryExp(a,b,c)),
  MulExp
};

RelExp:Box<Exp> = {
  <a:RelExp> <b:CmpOp> <c:AddExp> => Box::new(Exp::BinaryExp(a,b,c)),
  AddExp
};

EqExp:Box<Exp> ={
  <a:EqExp> <b:EqOp> <c:RelExp> => Box::new(Exp::BinaryExp(a,b,c)),
  RelExp
};

LAndExp:Box<Exp> = {
  <a:LAndExp> <b:AndOp> <c:EqExp> => Box::new(Exp::BinaryExp(a,b,c)),
  EqExp
};

LOrExp:Box<Exp> = {
  <a:LOrExp> <b:OrOp> <c:LAndExp> => Box::new(Exp::BinaryExp(a,b,c)),
  LAndExp
};

UnaryOp: UnaryOp = {
  "+" => UnaryOp::Pos,
  "-" => UnaryOp::Neg,
  "!" => UnaryOp::Not,
};

MulOp: BinaryOp = {
  "*" => BinaryOp::Mul,
  "/" => BinaryOp::Div,
  "%" => BinaryOp::Mod,
};

AddOp: BinaryOp = {
  "+" => BinaryOp::Add,
  "-" => BinaryOp::Sub,
};

CmpOp: BinaryOp = {
  "<" => BinaryOp::Lt,
  ">" => BinaryOp::Gt,
  "<=" => BinaryOp::Le,
  ">=" => BinaryOp::Ge,
}

EqOp:BinaryOp ={
  "==" => BinaryOp::Eq,
  "!=" => BinaryOp::Ne,
}

AndOp:BinaryOp = {
  "&&" => BinaryOp::And,
}

OrOp:BinaryOp = {
  "||" => BinaryOp::Or,
}

// 如果匹配到标识符, 就返回这个字符串
// 一对尖括号在此处指代的是正则表达式匹配到的字符串 (&str)
// 关于尖括号到底代表什么, 请 RTFM
Ident: String = r"[_a-zA-Z][_a-zA-Z0-9]*" => <>.to_string();

// 对整数字面量的处理方式: 把匹配到的字符串按对应进制转换成数字
IntConst: i32 = {
  r"[1-9][0-9]*" => i32::from_str_radix(<>, 10).unwrap(),
  r"0[0-7]*" => i32::from_str_radix(<>, 8).unwrap(),
  r"0[xX][0-9a-fA-F]+" => i32::from_str_radix(&<>[2..], 16).unwrap(),
}